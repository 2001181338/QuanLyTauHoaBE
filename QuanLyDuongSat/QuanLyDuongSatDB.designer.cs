#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QuanLyDuongSat
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="QuanLyTauHoa")]
	public partial class QuanLyDuongSatDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertChuyen(Chuyen instance);
    partial void UpdateChuyen(Chuyen instance);
    partial void DeleteChuyen(Chuyen instance);
    partial void InsertVe(Ve instance);
    partial void UpdateVe(Ve instance);
    partial void DeleteVe(Ve instance);
    partial void InsertChuyenTau(ChuyenTau instance);
    partial void UpdateChuyenTau(ChuyenTau instance);
    partial void DeleteChuyenTau(ChuyenTau instance);
    partial void InsertDatVe(DatVe instance);
    partial void UpdateDatVe(DatVe instance);
    partial void DeleteDatVe(DatVe instance);
    partial void InsertGa(Ga instance);
    partial void UpdateGa(Ga instance);
    partial void DeleteGa(Ga instance);
    partial void InsertGhe(Ghe instance);
    partial void UpdateGhe(Ghe instance);
    partial void DeleteGhe(Ghe instance);
    partial void InsertKhachHang(KhachHang instance);
    partial void UpdateKhachHang(KhachHang instance);
    partial void DeleteKhachHang(KhachHang instance);
    partial void InsertLoaiVe(LoaiVe instance);
    partial void UpdateLoaiVe(LoaiVe instance);
    partial void DeleteLoaiVe(LoaiVe instance);
    partial void InsertQuanTri(QuanTri instance);
    partial void UpdateQuanTri(QuanTri instance);
    partial void DeleteQuanTri(QuanTri instance);
    partial void InsertTau(Tau instance);
    partial void UpdateTau(Tau instance);
    partial void DeleteTau(Tau instance);
    partial void InsertThanhPho_Tinh(ThanhPho_Tinh instance);
    partial void UpdateThanhPho_Tinh(ThanhPho_Tinh instance);
    partial void DeleteThanhPho_Tinh(ThanhPho_Tinh instance);
    partial void InsertToa(Toa instance);
    partial void UpdateToa(Toa instance);
    partial void DeleteToa(Toa instance);
    partial void InsertTuyen(Tuyen instance);
    partial void UpdateTuyen(Tuyen instance);
    partial void DeleteTuyen(Tuyen instance);
    #endregion
		
		public QuanLyDuongSatDBDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["QuanLyTauHoaConnectionString1"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public QuanLyDuongSatDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QuanLyDuongSatDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QuanLyDuongSatDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QuanLyDuongSatDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Chuyen> Chuyens
		{
			get
			{
				return this.GetTable<Chuyen>();
			}
		}
		
		public System.Data.Linq.Table<Ve> Ves
		{
			get
			{
				return this.GetTable<Ve>();
			}
		}
		
		public System.Data.Linq.Table<ChuyenTau> ChuyenTaus
		{
			get
			{
				return this.GetTable<ChuyenTau>();
			}
		}
		
		public System.Data.Linq.Table<DatVe> DatVes
		{
			get
			{
				return this.GetTable<DatVe>();
			}
		}
		
		public System.Data.Linq.Table<Ga> Gas
		{
			get
			{
				return this.GetTable<Ga>();
			}
		}
		
		public System.Data.Linq.Table<Ghe> Ghes
		{
			get
			{
				return this.GetTable<Ghe>();
			}
		}
		
		public System.Data.Linq.Table<KhachHang> KhachHangs
		{
			get
			{
				return this.GetTable<KhachHang>();
			}
		}
		
		public System.Data.Linq.Table<LoaiVe> LoaiVes
		{
			get
			{
				return this.GetTable<LoaiVe>();
			}
		}
		
		public System.Data.Linq.Table<QuanTri> QuanTris
		{
			get
			{
				return this.GetTable<QuanTri>();
			}
		}
		
		public System.Data.Linq.Table<Tau> Taus
		{
			get
			{
				return this.GetTable<Tau>();
			}
		}
		
		public System.Data.Linq.Table<ThanhPho_Tinh> ThanhPho_Tinhs
		{
			get
			{
				return this.GetTable<ThanhPho_Tinh>();
			}
		}
		
		public System.Data.Linq.Table<Toa> Toas
		{
			get
			{
				return this.GetTable<Toa>();
			}
		}
		
		public System.Data.Linq.Table<Tuyen> Tuyens
		{
			get
			{
				return this.GetTable<Tuyen>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Chuyen")]
	public partial class Chuyen : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MaChuyen;
		
		private System.Nullable<int> _MaTuyen;
		
		private string _GioKhoiHanh;
		
		private EntitySet<ChuyenTau> _ChuyenTaus;
		
		private EntityRef<Tuyen> _Tuyen;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaChuyenChanging(int value);
    partial void OnMaChuyenChanged();
    partial void OnMaTuyenChanging(System.Nullable<int> value);
    partial void OnMaTuyenChanged();
    partial void OnGioKhoiHanhChanging(string value);
    partial void OnGioKhoiHanhChanged();
    #endregion
		
		public Chuyen()
		{
			this._ChuyenTaus = new EntitySet<ChuyenTau>(new Action<ChuyenTau>(this.attach_ChuyenTaus), new Action<ChuyenTau>(this.detach_ChuyenTaus));
			this._Tuyen = default(EntityRef<Tuyen>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaChuyen", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MaChuyen
		{
			get
			{
				return this._MaChuyen;
			}
			set
			{
				if ((this._MaChuyen != value))
				{
					this.OnMaChuyenChanging(value);
					this.SendPropertyChanging();
					this._MaChuyen = value;
					this.SendPropertyChanged("MaChuyen");
					this.OnMaChuyenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaTuyen", DbType="Int")]
		public System.Nullable<int> MaTuyen
		{
			get
			{
				return this._MaTuyen;
			}
			set
			{
				if ((this._MaTuyen != value))
				{
					if (this._Tuyen.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaTuyenChanging(value);
					this.SendPropertyChanging();
					this._MaTuyen = value;
					this.SendPropertyChanged("MaTuyen");
					this.OnMaTuyenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GioKhoiHanh", DbType="VarChar(5)")]
		public string GioKhoiHanh
		{
			get
			{
				return this._GioKhoiHanh;
			}
			set
			{
				if ((this._GioKhoiHanh != value))
				{
					this.OnGioKhoiHanhChanging(value);
					this.SendPropertyChanging();
					this._GioKhoiHanh = value;
					this.SendPropertyChanged("GioKhoiHanh");
					this.OnGioKhoiHanhChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Chuyen_ChuyenTau", Storage="_ChuyenTaus", ThisKey="MaChuyen", OtherKey="MaChuyen")]
		public EntitySet<ChuyenTau> ChuyenTaus
		{
			get
			{
				return this._ChuyenTaus;
			}
			set
			{
				this._ChuyenTaus.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tuyen_Chuyen", Storage="_Tuyen", ThisKey="MaTuyen", OtherKey="MaTuyen", IsForeignKey=true)]
		public Tuyen Tuyen
		{
			get
			{
				return this._Tuyen.Entity;
			}
			set
			{
				Tuyen previousValue = this._Tuyen.Entity;
				if (((previousValue != value) 
							|| (this._Tuyen.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tuyen.Entity = null;
						previousValue.Chuyens.Remove(this);
					}
					this._Tuyen.Entity = value;
					if ((value != null))
					{
						value.Chuyens.Add(this);
						this._MaTuyen = value.MaTuyen;
					}
					else
					{
						this._MaTuyen = default(Nullable<int>);
					}
					this.SendPropertyChanged("Tuyen");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ChuyenTaus(ChuyenTau entity)
		{
			this.SendPropertyChanging();
			entity.Chuyen = this;
		}
		
		private void detach_ChuyenTaus(ChuyenTau entity)
		{
			this.SendPropertyChanging();
			entity.Chuyen = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Ve")]
	public partial class Ve : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SoVe;
		
		private System.Nullable<int> _MaDatVe;
		
		private System.Nullable<int> _MaLoaiVe;
		
		private System.Nullable<int> _TrangThaiVe;
		
		private System.Nullable<System.DateTime> _NgayBanVe;
		
		private EntityRef<DatVe> _DatVe;
		
		private EntityRef<LoaiVe> _LoaiVe;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSoVeChanging(int value);
    partial void OnSoVeChanged();
    partial void OnMaDatVeChanging(System.Nullable<int> value);
    partial void OnMaDatVeChanged();
    partial void OnMaLoaiVeChanging(System.Nullable<int> value);
    partial void OnMaLoaiVeChanged();
    partial void OnTrangThaiVeChanging(System.Nullable<int> value);
    partial void OnTrangThaiVeChanged();
    partial void OnNgayBanVeChanging(System.Nullable<System.DateTime> value);
    partial void OnNgayBanVeChanged();
    #endregion
		
		public Ve()
		{
			this._DatVe = default(EntityRef<DatVe>);
			this._LoaiVe = default(EntityRef<LoaiVe>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SoVe", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SoVe
		{
			get
			{
				return this._SoVe;
			}
			set
			{
				if ((this._SoVe != value))
				{
					this.OnSoVeChanging(value);
					this.SendPropertyChanging();
					this._SoVe = value;
					this.SendPropertyChanged("SoVe");
					this.OnSoVeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaDatVe", DbType="Int")]
		public System.Nullable<int> MaDatVe
		{
			get
			{
				return this._MaDatVe;
			}
			set
			{
				if ((this._MaDatVe != value))
				{
					if (this._DatVe.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaDatVeChanging(value);
					this.SendPropertyChanging();
					this._MaDatVe = value;
					this.SendPropertyChanged("MaDatVe");
					this.OnMaDatVeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaLoaiVe", DbType="Int")]
		public System.Nullable<int> MaLoaiVe
		{
			get
			{
				return this._MaLoaiVe;
			}
			set
			{
				if ((this._MaLoaiVe != value))
				{
					if (this._LoaiVe.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaLoaiVeChanging(value);
					this.SendPropertyChanging();
					this._MaLoaiVe = value;
					this.SendPropertyChanged("MaLoaiVe");
					this.OnMaLoaiVeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrangThaiVe", DbType="Int")]
		public System.Nullable<int> TrangThaiVe
		{
			get
			{
				return this._TrangThaiVe;
			}
			set
			{
				if ((this._TrangThaiVe != value))
				{
					this.OnTrangThaiVeChanging(value);
					this.SendPropertyChanging();
					this._TrangThaiVe = value;
					this.SendPropertyChanged("TrangThaiVe");
					this.OnTrangThaiVeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NgayBanVe", DbType="DateTime")]
		public System.Nullable<System.DateTime> NgayBanVe
		{
			get
			{
				return this._NgayBanVe;
			}
			set
			{
				if ((this._NgayBanVe != value))
				{
					this.OnNgayBanVeChanging(value);
					this.SendPropertyChanging();
					this._NgayBanVe = value;
					this.SendPropertyChanged("NgayBanVe");
					this.OnNgayBanVeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DatVe_Ve", Storage="_DatVe", ThisKey="MaDatVe", OtherKey="MaDatVe", IsForeignKey=true)]
		public DatVe DatVe
		{
			get
			{
				return this._DatVe.Entity;
			}
			set
			{
				DatVe previousValue = this._DatVe.Entity;
				if (((previousValue != value) 
							|| (this._DatVe.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DatVe.Entity = null;
						previousValue.Ves.Remove(this);
					}
					this._DatVe.Entity = value;
					if ((value != null))
					{
						value.Ves.Add(this);
						this._MaDatVe = value.MaDatVe;
					}
					else
					{
						this._MaDatVe = default(Nullable<int>);
					}
					this.SendPropertyChanged("DatVe");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LoaiVe_Ve", Storage="_LoaiVe", ThisKey="MaLoaiVe", OtherKey="MaLoaiVe", IsForeignKey=true)]
		public LoaiVe LoaiVe
		{
			get
			{
				return this._LoaiVe.Entity;
			}
			set
			{
				LoaiVe previousValue = this._LoaiVe.Entity;
				if (((previousValue != value) 
							|| (this._LoaiVe.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LoaiVe.Entity = null;
						previousValue.Ves.Remove(this);
					}
					this._LoaiVe.Entity = value;
					if ((value != null))
					{
						value.Ves.Add(this);
						this._MaLoaiVe = value.MaLoaiVe;
					}
					else
					{
						this._MaLoaiVe = default(Nullable<int>);
					}
					this.SendPropertyChanged("LoaiVe");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ChuyenTau")]
	public partial class ChuyenTau : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MaChuyenTau;
		
		private System.Nullable<int> _MaChuyen;
		
		private System.Nullable<int> _MaTau;
		
		private System.Nullable<System.DateTime> _NgayKhoiHanh;
		
		private EntitySet<LoaiVe> _LoaiVes;
		
		private EntityRef<Chuyen> _Chuyen;
		
		private EntityRef<Tau> _Tau;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaChuyenTauChanging(int value);
    partial void OnMaChuyenTauChanged();
    partial void OnMaChuyenChanging(System.Nullable<int> value);
    partial void OnMaChuyenChanged();
    partial void OnMaTauChanging(System.Nullable<int> value);
    partial void OnMaTauChanged();
    partial void OnNgayKhoiHanhChanging(System.Nullable<System.DateTime> value);
    partial void OnNgayKhoiHanhChanged();
    #endregion
		
		public ChuyenTau()
		{
			this._LoaiVes = new EntitySet<LoaiVe>(new Action<LoaiVe>(this.attach_LoaiVes), new Action<LoaiVe>(this.detach_LoaiVes));
			this._Chuyen = default(EntityRef<Chuyen>);
			this._Tau = default(EntityRef<Tau>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaChuyenTau", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MaChuyenTau
		{
			get
			{
				return this._MaChuyenTau;
			}
			set
			{
				if ((this._MaChuyenTau != value))
				{
					this.OnMaChuyenTauChanging(value);
					this.SendPropertyChanging();
					this._MaChuyenTau = value;
					this.SendPropertyChanged("MaChuyenTau");
					this.OnMaChuyenTauChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaChuyen", DbType="Int")]
		public System.Nullable<int> MaChuyen
		{
			get
			{
				return this._MaChuyen;
			}
			set
			{
				if ((this._MaChuyen != value))
				{
					if (this._Chuyen.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaChuyenChanging(value);
					this.SendPropertyChanging();
					this._MaChuyen = value;
					this.SendPropertyChanged("MaChuyen");
					this.OnMaChuyenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaTau", DbType="Int")]
		public System.Nullable<int> MaTau
		{
			get
			{
				return this._MaTau;
			}
			set
			{
				if ((this._MaTau != value))
				{
					if (this._Tau.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaTauChanging(value);
					this.SendPropertyChanging();
					this._MaTau = value;
					this.SendPropertyChanged("MaTau");
					this.OnMaTauChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NgayKhoiHanh", DbType="DateTime")]
		public System.Nullable<System.DateTime> NgayKhoiHanh
		{
			get
			{
				return this._NgayKhoiHanh;
			}
			set
			{
				if ((this._NgayKhoiHanh != value))
				{
					this.OnNgayKhoiHanhChanging(value);
					this.SendPropertyChanging();
					this._NgayKhoiHanh = value;
					this.SendPropertyChanged("NgayKhoiHanh");
					this.OnNgayKhoiHanhChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChuyenTau_LoaiVe", Storage="_LoaiVes", ThisKey="MaChuyenTau", OtherKey="MaChuyenTau")]
		public EntitySet<LoaiVe> LoaiVes
		{
			get
			{
				return this._LoaiVes;
			}
			set
			{
				this._LoaiVes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Chuyen_ChuyenTau", Storage="_Chuyen", ThisKey="MaChuyen", OtherKey="MaChuyen", IsForeignKey=true)]
		public Chuyen Chuyen
		{
			get
			{
				return this._Chuyen.Entity;
			}
			set
			{
				Chuyen previousValue = this._Chuyen.Entity;
				if (((previousValue != value) 
							|| (this._Chuyen.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Chuyen.Entity = null;
						previousValue.ChuyenTaus.Remove(this);
					}
					this._Chuyen.Entity = value;
					if ((value != null))
					{
						value.ChuyenTaus.Add(this);
						this._MaChuyen = value.MaChuyen;
					}
					else
					{
						this._MaChuyen = default(Nullable<int>);
					}
					this.SendPropertyChanged("Chuyen");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tau_ChuyenTau", Storage="_Tau", ThisKey="MaTau", OtherKey="MaTau", IsForeignKey=true)]
		public Tau Tau
		{
			get
			{
				return this._Tau.Entity;
			}
			set
			{
				Tau previousValue = this._Tau.Entity;
				if (((previousValue != value) 
							|| (this._Tau.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tau.Entity = null;
						previousValue.ChuyenTaus.Remove(this);
					}
					this._Tau.Entity = value;
					if ((value != null))
					{
						value.ChuyenTaus.Add(this);
						this._MaTau = value.MaTau;
					}
					else
					{
						this._MaTau = default(Nullable<int>);
					}
					this.SendPropertyChanged("Tau");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LoaiVes(LoaiVe entity)
		{
			this.SendPropertyChanging();
			entity.ChuyenTau = this;
		}
		
		private void detach_LoaiVes(LoaiVe entity)
		{
			this.SendPropertyChanging();
			entity.ChuyenTau = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DatVe")]
	public partial class DatVe : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MaDatVe;
		
		private System.Nullable<int> _MaKhach;
		
		private System.Nullable<System.DateTime> _NgayDat;
		
		private System.Nullable<double> _ThanhTien;
		
		private System.Nullable<int> _SoLuongVeDat;
		
		private EntitySet<Ve> _Ves;
		
		private EntityRef<KhachHang> _KhachHang;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaDatVeChanging(int value);
    partial void OnMaDatVeChanged();
    partial void OnMaKhachChanging(System.Nullable<int> value);
    partial void OnMaKhachChanged();
    partial void OnNgayDatChanging(System.Nullable<System.DateTime> value);
    partial void OnNgayDatChanged();
    partial void OnThanhTienChanging(System.Nullable<double> value);
    partial void OnThanhTienChanged();
    partial void OnSoLuongVeDatChanging(System.Nullable<int> value);
    partial void OnSoLuongVeDatChanged();
    #endregion
		
		public DatVe()
		{
			this._Ves = new EntitySet<Ve>(new Action<Ve>(this.attach_Ves), new Action<Ve>(this.detach_Ves));
			this._KhachHang = default(EntityRef<KhachHang>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaDatVe", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MaDatVe
		{
			get
			{
				return this._MaDatVe;
			}
			set
			{
				if ((this._MaDatVe != value))
				{
					this.OnMaDatVeChanging(value);
					this.SendPropertyChanging();
					this._MaDatVe = value;
					this.SendPropertyChanged("MaDatVe");
					this.OnMaDatVeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaKhach", DbType="Int")]
		public System.Nullable<int> MaKhach
		{
			get
			{
				return this._MaKhach;
			}
			set
			{
				if ((this._MaKhach != value))
				{
					if (this._KhachHang.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaKhachChanging(value);
					this.SendPropertyChanging();
					this._MaKhach = value;
					this.SendPropertyChanged("MaKhach");
					this.OnMaKhachChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NgayDat", DbType="DateTime")]
		public System.Nullable<System.DateTime> NgayDat
		{
			get
			{
				return this._NgayDat;
			}
			set
			{
				if ((this._NgayDat != value))
				{
					this.OnNgayDatChanging(value);
					this.SendPropertyChanging();
					this._NgayDat = value;
					this.SendPropertyChanged("NgayDat");
					this.OnNgayDatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThanhTien", DbType="Float")]
		public System.Nullable<double> ThanhTien
		{
			get
			{
				return this._ThanhTien;
			}
			set
			{
				if ((this._ThanhTien != value))
				{
					this.OnThanhTienChanging(value);
					this.SendPropertyChanging();
					this._ThanhTien = value;
					this.SendPropertyChanged("ThanhTien");
					this.OnThanhTienChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SoLuongVeDat", DbType="Int")]
		public System.Nullable<int> SoLuongVeDat
		{
			get
			{
				return this._SoLuongVeDat;
			}
			set
			{
				if ((this._SoLuongVeDat != value))
				{
					this.OnSoLuongVeDatChanging(value);
					this.SendPropertyChanging();
					this._SoLuongVeDat = value;
					this.SendPropertyChanged("SoLuongVeDat");
					this.OnSoLuongVeDatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DatVe_Ve", Storage="_Ves", ThisKey="MaDatVe", OtherKey="MaDatVe")]
		public EntitySet<Ve> Ves
		{
			get
			{
				return this._Ves;
			}
			set
			{
				this._Ves.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="KhachHang_DatVe", Storage="_KhachHang", ThisKey="MaKhach", OtherKey="MaKhach", IsForeignKey=true)]
		public KhachHang KhachHang
		{
			get
			{
				return this._KhachHang.Entity;
			}
			set
			{
				KhachHang previousValue = this._KhachHang.Entity;
				if (((previousValue != value) 
							|| (this._KhachHang.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._KhachHang.Entity = null;
						previousValue.DatVes.Remove(this);
					}
					this._KhachHang.Entity = value;
					if ((value != null))
					{
						value.DatVes.Add(this);
						this._MaKhach = value.MaKhach;
					}
					else
					{
						this._MaKhach = default(Nullable<int>);
					}
					this.SendPropertyChanged("KhachHang");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Ves(Ve entity)
		{
			this.SendPropertyChanging();
			entity.DatVe = this;
		}
		
		private void detach_Ves(Ve entity)
		{
			this.SendPropertyChanging();
			entity.DatVe = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Ga")]
	public partial class Ga : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MaGa;
		
		private string _TenGa;
		
		private System.Nullable<int> _MaThanhPhoTinh;
		
		private EntitySet<Tuyen> _Tuyens;
		
		private EntitySet<Tuyen> _Tuyens1;
		
		private EntityRef<ThanhPho_Tinh> _ThanhPho_Tinh;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaGaChanging(int value);
    partial void OnMaGaChanged();
    partial void OnTenGaChanging(string value);
    partial void OnTenGaChanged();
    partial void OnMaThanhPhoTinhChanging(System.Nullable<int> value);
    partial void OnMaThanhPhoTinhChanged();
    #endregion
		
		public Ga()
		{
			this._Tuyens = new EntitySet<Tuyen>(new Action<Tuyen>(this.attach_Tuyens), new Action<Tuyen>(this.detach_Tuyens));
			this._Tuyens1 = new EntitySet<Tuyen>(new Action<Tuyen>(this.attach_Tuyens1), new Action<Tuyen>(this.detach_Tuyens1));
			this._ThanhPho_Tinh = default(EntityRef<ThanhPho_Tinh>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaGa", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MaGa
		{
			get
			{
				return this._MaGa;
			}
			set
			{
				if ((this._MaGa != value))
				{
					this.OnMaGaChanging(value);
					this.SendPropertyChanging();
					this._MaGa = value;
					this.SendPropertyChanged("MaGa");
					this.OnMaGaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenGa", DbType="NVarChar(50)")]
		public string TenGa
		{
			get
			{
				return this._TenGa;
			}
			set
			{
				if ((this._TenGa != value))
				{
					this.OnTenGaChanging(value);
					this.SendPropertyChanging();
					this._TenGa = value;
					this.SendPropertyChanged("TenGa");
					this.OnTenGaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaThanhPhoTinh", DbType="Int")]
		public System.Nullable<int> MaThanhPhoTinh
		{
			get
			{
				return this._MaThanhPhoTinh;
			}
			set
			{
				if ((this._MaThanhPhoTinh != value))
				{
					if (this._ThanhPho_Tinh.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaThanhPhoTinhChanging(value);
					this.SendPropertyChanging();
					this._MaThanhPhoTinh = value;
					this.SendPropertyChanged("MaThanhPhoTinh");
					this.OnMaThanhPhoTinhChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ga_Tuyen", Storage="_Tuyens", ThisKey="MaGa", OtherKey="GaDi")]
		public EntitySet<Tuyen> Tuyens
		{
			get
			{
				return this._Tuyens;
			}
			set
			{
				this._Tuyens.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ga_Tuyen1", Storage="_Tuyens1", ThisKey="MaGa", OtherKey="GaDen")]
		public EntitySet<Tuyen> Tuyens1
		{
			get
			{
				return this._Tuyens1;
			}
			set
			{
				this._Tuyens1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ThanhPho_Tinh_Ga", Storage="_ThanhPho_Tinh", ThisKey="MaThanhPhoTinh", OtherKey="MaThanhPhoTinh", IsForeignKey=true)]
		public ThanhPho_Tinh ThanhPho_Tinh
		{
			get
			{
				return this._ThanhPho_Tinh.Entity;
			}
			set
			{
				ThanhPho_Tinh previousValue = this._ThanhPho_Tinh.Entity;
				if (((previousValue != value) 
							|| (this._ThanhPho_Tinh.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ThanhPho_Tinh.Entity = null;
						previousValue.Gas.Remove(this);
					}
					this._ThanhPho_Tinh.Entity = value;
					if ((value != null))
					{
						value.Gas.Add(this);
						this._MaThanhPhoTinh = value.MaThanhPhoTinh;
					}
					else
					{
						this._MaThanhPhoTinh = default(Nullable<int>);
					}
					this.SendPropertyChanged("ThanhPho_Tinh");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tuyens(Tuyen entity)
		{
			this.SendPropertyChanging();
			entity.Ga = this;
		}
		
		private void detach_Tuyens(Tuyen entity)
		{
			this.SendPropertyChanging();
			entity.Ga = null;
		}
		
		private void attach_Tuyens1(Tuyen entity)
		{
			this.SendPropertyChanging();
			entity.Ga1 = this;
		}
		
		private void detach_Tuyens1(Tuyen entity)
		{
			this.SendPropertyChanging();
			entity.Ga1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Ghe")]
	public partial class Ghe : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MaGhe;
		
		private string _TenGhe;
		
		private System.Nullable<bool> _DaXoa;
		
		private System.Nullable<int> _MaToa;
		
		private EntityRef<Toa> _Toa;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaGheChanging(int value);
    partial void OnMaGheChanged();
    partial void OnTenGheChanging(string value);
    partial void OnTenGheChanged();
    partial void OnDaXoaChanging(System.Nullable<bool> value);
    partial void OnDaXoaChanged();
    partial void OnMaToaChanging(System.Nullable<int> value);
    partial void OnMaToaChanged();
    #endregion
		
		public Ghe()
		{
			this._Toa = default(EntityRef<Toa>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaGhe", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MaGhe
		{
			get
			{
				return this._MaGhe;
			}
			set
			{
				if ((this._MaGhe != value))
				{
					this.OnMaGheChanging(value);
					this.SendPropertyChanging();
					this._MaGhe = value;
					this.SendPropertyChanged("MaGhe");
					this.OnMaGheChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenGhe", DbType="NVarChar(50)")]
		public string TenGhe
		{
			get
			{
				return this._TenGhe;
			}
			set
			{
				if ((this._TenGhe != value))
				{
					this.OnTenGheChanging(value);
					this.SendPropertyChanging();
					this._TenGhe = value;
					this.SendPropertyChanged("TenGhe");
					this.OnTenGheChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DaXoa", DbType="Bit")]
		public System.Nullable<bool> DaXoa
		{
			get
			{
				return this._DaXoa;
			}
			set
			{
				if ((this._DaXoa != value))
				{
					this.OnDaXoaChanging(value);
					this.SendPropertyChanging();
					this._DaXoa = value;
					this.SendPropertyChanged("DaXoa");
					this.OnDaXoaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaToa", DbType="Int")]
		public System.Nullable<int> MaToa
		{
			get
			{
				return this._MaToa;
			}
			set
			{
				if ((this._MaToa != value))
				{
					if (this._Toa.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaToaChanging(value);
					this.SendPropertyChanging();
					this._MaToa = value;
					this.SendPropertyChanged("MaToa");
					this.OnMaToaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Toa_Ghe", Storage="_Toa", ThisKey="MaToa", OtherKey="MaToa", IsForeignKey=true)]
		public Toa Toa
		{
			get
			{
				return this._Toa.Entity;
			}
			set
			{
				Toa previousValue = this._Toa.Entity;
				if (((previousValue != value) 
							|| (this._Toa.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Toa.Entity = null;
						previousValue.Ghes.Remove(this);
					}
					this._Toa.Entity = value;
					if ((value != null))
					{
						value.Ghes.Add(this);
						this._MaToa = value.MaToa;
					}
					else
					{
						this._MaToa = default(Nullable<int>);
					}
					this.SendPropertyChanged("Toa");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.KhachHang")]
	public partial class KhachHang : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MaKhach;
		
		private string _HoTen;
		
		private System.Nullable<System.DateTime> _NgaySinh;
		
		private System.Nullable<int> _GioiTinh;
		
		private string _CMND;
		
		private string _SoDT;
		
		private EntitySet<DatVe> _DatVes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaKhachChanging(int value);
    partial void OnMaKhachChanged();
    partial void OnHoTenChanging(string value);
    partial void OnHoTenChanged();
    partial void OnNgaySinhChanging(System.Nullable<System.DateTime> value);
    partial void OnNgaySinhChanged();
    partial void OnGioiTinhChanging(System.Nullable<int> value);
    partial void OnGioiTinhChanged();
    partial void OnCMNDChanging(string value);
    partial void OnCMNDChanged();
    partial void OnSoDTChanging(string value);
    partial void OnSoDTChanged();
    #endregion
		
		public KhachHang()
		{
			this._DatVes = new EntitySet<DatVe>(new Action<DatVe>(this.attach_DatVes), new Action<DatVe>(this.detach_DatVes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaKhach", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MaKhach
		{
			get
			{
				return this._MaKhach;
			}
			set
			{
				if ((this._MaKhach != value))
				{
					this.OnMaKhachChanging(value);
					this.SendPropertyChanging();
					this._MaKhach = value;
					this.SendPropertyChanged("MaKhach");
					this.OnMaKhachChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HoTen", DbType="NVarChar(50)")]
		public string HoTen
		{
			get
			{
				return this._HoTen;
			}
			set
			{
				if ((this._HoTen != value))
				{
					this.OnHoTenChanging(value);
					this.SendPropertyChanging();
					this._HoTen = value;
					this.SendPropertyChanged("HoTen");
					this.OnHoTenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NgaySinh", DbType="DateTime")]
		public System.Nullable<System.DateTime> NgaySinh
		{
			get
			{
				return this._NgaySinh;
			}
			set
			{
				if ((this._NgaySinh != value))
				{
					this.OnNgaySinhChanging(value);
					this.SendPropertyChanging();
					this._NgaySinh = value;
					this.SendPropertyChanged("NgaySinh");
					this.OnNgaySinhChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GioiTinh", DbType="Int")]
		public System.Nullable<int> GioiTinh
		{
			get
			{
				return this._GioiTinh;
			}
			set
			{
				if ((this._GioiTinh != value))
				{
					this.OnGioiTinhChanging(value);
					this.SendPropertyChanging();
					this._GioiTinh = value;
					this.SendPropertyChanged("GioiTinh");
					this.OnGioiTinhChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CMND", DbType="VarChar(15)")]
		public string CMND
		{
			get
			{
				return this._CMND;
			}
			set
			{
				if ((this._CMND != value))
				{
					this.OnCMNDChanging(value);
					this.SendPropertyChanging();
					this._CMND = value;
					this.SendPropertyChanged("CMND");
					this.OnCMNDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SoDT", DbType="NVarChar(15)")]
		public string SoDT
		{
			get
			{
				return this._SoDT;
			}
			set
			{
				if ((this._SoDT != value))
				{
					this.OnSoDTChanging(value);
					this.SendPropertyChanging();
					this._SoDT = value;
					this.SendPropertyChanged("SoDT");
					this.OnSoDTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="KhachHang_DatVe", Storage="_DatVes", ThisKey="MaKhach", OtherKey="MaKhach")]
		public EntitySet<DatVe> DatVes
		{
			get
			{
				return this._DatVes;
			}
			set
			{
				this._DatVes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DatVes(DatVe entity)
		{
			this.SendPropertyChanging();
			entity.KhachHang = this;
		}
		
		private void detach_DatVes(DatVe entity)
		{
			this.SendPropertyChanging();
			entity.KhachHang = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LoaiVe")]
	public partial class LoaiVe : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MaLoaiVe;
		
		private System.Nullable<int> _MaChuyenTau;
		
		private System.Nullable<double> _GiaVe;
		
		private System.Nullable<int> _LoaiVe1;
		
		private EntitySet<Ve> _Ves;
		
		private EntityRef<ChuyenTau> _ChuyenTau;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaLoaiVeChanging(int value);
    partial void OnMaLoaiVeChanged();
    partial void OnMaChuyenTauChanging(System.Nullable<int> value);
    partial void OnMaChuyenTauChanged();
    partial void OnGiaVeChanging(System.Nullable<double> value);
    partial void OnGiaVeChanged();
    partial void OnLoaiVe1Changing(System.Nullable<int> value);
    partial void OnLoaiVe1Changed();
    #endregion
		
		public LoaiVe()
		{
			this._Ves = new EntitySet<Ve>(new Action<Ve>(this.attach_Ves), new Action<Ve>(this.detach_Ves));
			this._ChuyenTau = default(EntityRef<ChuyenTau>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaLoaiVe", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MaLoaiVe
		{
			get
			{
				return this._MaLoaiVe;
			}
			set
			{
				if ((this._MaLoaiVe != value))
				{
					this.OnMaLoaiVeChanging(value);
					this.SendPropertyChanging();
					this._MaLoaiVe = value;
					this.SendPropertyChanged("MaLoaiVe");
					this.OnMaLoaiVeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaChuyenTau", DbType="Int")]
		public System.Nullable<int> MaChuyenTau
		{
			get
			{
				return this._MaChuyenTau;
			}
			set
			{
				if ((this._MaChuyenTau != value))
				{
					if (this._ChuyenTau.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaChuyenTauChanging(value);
					this.SendPropertyChanging();
					this._MaChuyenTau = value;
					this.SendPropertyChanged("MaChuyenTau");
					this.OnMaChuyenTauChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GiaVe", DbType="Float")]
		public System.Nullable<double> GiaVe
		{
			get
			{
				return this._GiaVe;
			}
			set
			{
				if ((this._GiaVe != value))
				{
					this.OnGiaVeChanging(value);
					this.SendPropertyChanging();
					this._GiaVe = value;
					this.SendPropertyChanged("GiaVe");
					this.OnGiaVeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="LoaiVe", Storage="_LoaiVe1", DbType="Int")]
		public System.Nullable<int> LoaiVe1
		{
			get
			{
				return this._LoaiVe1;
			}
			set
			{
				if ((this._LoaiVe1 != value))
				{
					this.OnLoaiVe1Changing(value);
					this.SendPropertyChanging();
					this._LoaiVe1 = value;
					this.SendPropertyChanged("LoaiVe1");
					this.OnLoaiVe1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LoaiVe_Ve", Storage="_Ves", ThisKey="MaLoaiVe", OtherKey="MaLoaiVe")]
		public EntitySet<Ve> Ves
		{
			get
			{
				return this._Ves;
			}
			set
			{
				this._Ves.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChuyenTau_LoaiVe", Storage="_ChuyenTau", ThisKey="MaChuyenTau", OtherKey="MaChuyenTau", IsForeignKey=true)]
		public ChuyenTau ChuyenTau
		{
			get
			{
				return this._ChuyenTau.Entity;
			}
			set
			{
				ChuyenTau previousValue = this._ChuyenTau.Entity;
				if (((previousValue != value) 
							|| (this._ChuyenTau.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChuyenTau.Entity = null;
						previousValue.LoaiVes.Remove(this);
					}
					this._ChuyenTau.Entity = value;
					if ((value != null))
					{
						value.LoaiVes.Add(this);
						this._MaChuyenTau = value.MaChuyenTau;
					}
					else
					{
						this._MaChuyenTau = default(Nullable<int>);
					}
					this.SendPropertyChanged("ChuyenTau");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Ves(Ve entity)
		{
			this.SendPropertyChanging();
			entity.LoaiVe = this;
		}
		
		private void detach_Ves(Ve entity)
		{
			this.SendPropertyChanging();
			entity.LoaiVe = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.QuanTri")]
	public partial class QuanTri : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _TaiKhoan;
		
		private string _MatKhau;
		
		private System.Nullable<System.DateTime> _NgayLap;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTaiKhoanChanging(string value);
    partial void OnTaiKhoanChanged();
    partial void OnMatKhauChanging(string value);
    partial void OnMatKhauChanged();
    partial void OnNgayLapChanging(System.Nullable<System.DateTime> value);
    partial void OnNgayLapChanged();
    #endregion
		
		public QuanTri()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaiKhoan", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string TaiKhoan
		{
			get
			{
				return this._TaiKhoan;
			}
			set
			{
				if ((this._TaiKhoan != value))
				{
					this.OnTaiKhoanChanging(value);
					this.SendPropertyChanging();
					this._TaiKhoan = value;
					this.SendPropertyChanged("TaiKhoan");
					this.OnTaiKhoanChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatKhau", DbType="NVarChar(50)")]
		public string MatKhau
		{
			get
			{
				return this._MatKhau;
			}
			set
			{
				if ((this._MatKhau != value))
				{
					this.OnMatKhauChanging(value);
					this.SendPropertyChanging();
					this._MatKhau = value;
					this.SendPropertyChanged("MatKhau");
					this.OnMatKhauChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NgayLap", DbType="DateTime")]
		public System.Nullable<System.DateTime> NgayLap
		{
			get
			{
				return this._NgayLap;
			}
			set
			{
				if ((this._NgayLap != value))
				{
					this.OnNgayLapChanging(value);
					this.SendPropertyChanging();
					this._NgayLap = value;
					this.SendPropertyChanged("NgayLap");
					this.OnNgayLapChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tau")]
	public partial class Tau : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MaTau;
		
		private string _TenTau;
		
		private System.Nullable<int> _TrangThai;
		
		private EntitySet<ChuyenTau> _ChuyenTaus;
		
		private EntitySet<Toa> _Toas;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaTauChanging(int value);
    partial void OnMaTauChanged();
    partial void OnTenTauChanging(string value);
    partial void OnTenTauChanged();
    partial void OnTrangThaiChanging(System.Nullable<int> value);
    partial void OnTrangThaiChanged();
    #endregion
		
		public Tau()
		{
			this._ChuyenTaus = new EntitySet<ChuyenTau>(new Action<ChuyenTau>(this.attach_ChuyenTaus), new Action<ChuyenTau>(this.detach_ChuyenTaus));
			this._Toas = new EntitySet<Toa>(new Action<Toa>(this.attach_Toas), new Action<Toa>(this.detach_Toas));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaTau", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MaTau
		{
			get
			{
				return this._MaTau;
			}
			set
			{
				if ((this._MaTau != value))
				{
					this.OnMaTauChanging(value);
					this.SendPropertyChanging();
					this._MaTau = value;
					this.SendPropertyChanged("MaTau");
					this.OnMaTauChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenTau", DbType="NVarChar(50)")]
		public string TenTau
		{
			get
			{
				return this._TenTau;
			}
			set
			{
				if ((this._TenTau != value))
				{
					this.OnTenTauChanging(value);
					this.SendPropertyChanging();
					this._TenTau = value;
					this.SendPropertyChanged("TenTau");
					this.OnTenTauChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrangThai", DbType="Int")]
		public System.Nullable<int> TrangThai
		{
			get
			{
				return this._TrangThai;
			}
			set
			{
				if ((this._TrangThai != value))
				{
					this.OnTrangThaiChanging(value);
					this.SendPropertyChanging();
					this._TrangThai = value;
					this.SendPropertyChanged("TrangThai");
					this.OnTrangThaiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tau_ChuyenTau", Storage="_ChuyenTaus", ThisKey="MaTau", OtherKey="MaTau")]
		public EntitySet<ChuyenTau> ChuyenTaus
		{
			get
			{
				return this._ChuyenTaus;
			}
			set
			{
				this._ChuyenTaus.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tau_Toa", Storage="_Toas", ThisKey="MaTau", OtherKey="MaTau")]
		public EntitySet<Toa> Toas
		{
			get
			{
				return this._Toas;
			}
			set
			{
				this._Toas.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ChuyenTaus(ChuyenTau entity)
		{
			this.SendPropertyChanging();
			entity.Tau = this;
		}
		
		private void detach_ChuyenTaus(ChuyenTau entity)
		{
			this.SendPropertyChanging();
			entity.Tau = null;
		}
		
		private void attach_Toas(Toa entity)
		{
			this.SendPropertyChanging();
			entity.Tau = this;
		}
		
		private void detach_Toas(Toa entity)
		{
			this.SendPropertyChanging();
			entity.Tau = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ThanhPho_Tinh")]
	public partial class ThanhPho_Tinh : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MaThanhPhoTinh;
		
		private string _TenThanhPhoTinh;
		
		private EntitySet<Ga> _Gas;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaThanhPhoTinhChanging(int value);
    partial void OnMaThanhPhoTinhChanged();
    partial void OnTenThanhPhoTinhChanging(string value);
    partial void OnTenThanhPhoTinhChanged();
    #endregion
		
		public ThanhPho_Tinh()
		{
			this._Gas = new EntitySet<Ga>(new Action<Ga>(this.attach_Gas), new Action<Ga>(this.detach_Gas));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaThanhPhoTinh", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MaThanhPhoTinh
		{
			get
			{
				return this._MaThanhPhoTinh;
			}
			set
			{
				if ((this._MaThanhPhoTinh != value))
				{
					this.OnMaThanhPhoTinhChanging(value);
					this.SendPropertyChanging();
					this._MaThanhPhoTinh = value;
					this.SendPropertyChanged("MaThanhPhoTinh");
					this.OnMaThanhPhoTinhChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenThanhPhoTinh", DbType="NVarChar(50)")]
		public string TenThanhPhoTinh
		{
			get
			{
				return this._TenThanhPhoTinh;
			}
			set
			{
				if ((this._TenThanhPhoTinh != value))
				{
					this.OnTenThanhPhoTinhChanging(value);
					this.SendPropertyChanging();
					this._TenThanhPhoTinh = value;
					this.SendPropertyChanged("TenThanhPhoTinh");
					this.OnTenThanhPhoTinhChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ThanhPho_Tinh_Ga", Storage="_Gas", ThisKey="MaThanhPhoTinh", OtherKey="MaThanhPhoTinh")]
		public EntitySet<Ga> Gas
		{
			get
			{
				return this._Gas;
			}
			set
			{
				this._Gas.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Gas(Ga entity)
		{
			this.SendPropertyChanging();
			entity.ThanhPho_Tinh = this;
		}
		
		private void detach_Gas(Ga entity)
		{
			this.SendPropertyChanging();
			entity.ThanhPho_Tinh = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Toa")]
	public partial class Toa : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MaToa;
		
		private System.Nullable<int> _SoLuong;
		
		private System.Nullable<int> _MaTau;
		
		private System.Nullable<int> _LoaiCho;
		
		private string _TenToa;
		
		private EntitySet<Ghe> _Ghes;
		
		private EntityRef<Tau> _Tau;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaToaChanging(int value);
    partial void OnMaToaChanged();
    partial void OnSoLuongChanging(System.Nullable<int> value);
    partial void OnSoLuongChanged();
    partial void OnMaTauChanging(System.Nullable<int> value);
    partial void OnMaTauChanged();
    partial void OnLoaiChoChanging(System.Nullable<int> value);
    partial void OnLoaiChoChanged();
    partial void OnTenToaChanging(string value);
    partial void OnTenToaChanged();
    #endregion
		
		public Toa()
		{
			this._Ghes = new EntitySet<Ghe>(new Action<Ghe>(this.attach_Ghes), new Action<Ghe>(this.detach_Ghes));
			this._Tau = default(EntityRef<Tau>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaToa", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MaToa
		{
			get
			{
				return this._MaToa;
			}
			set
			{
				if ((this._MaToa != value))
				{
					this.OnMaToaChanging(value);
					this.SendPropertyChanging();
					this._MaToa = value;
					this.SendPropertyChanged("MaToa");
					this.OnMaToaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SoLuong", DbType="Int")]
		public System.Nullable<int> SoLuong
		{
			get
			{
				return this._SoLuong;
			}
			set
			{
				if ((this._SoLuong != value))
				{
					this.OnSoLuongChanging(value);
					this.SendPropertyChanging();
					this._SoLuong = value;
					this.SendPropertyChanged("SoLuong");
					this.OnSoLuongChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaTau", DbType="Int")]
		public System.Nullable<int> MaTau
		{
			get
			{
				return this._MaTau;
			}
			set
			{
				if ((this._MaTau != value))
				{
					if (this._Tau.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaTauChanging(value);
					this.SendPropertyChanging();
					this._MaTau = value;
					this.SendPropertyChanged("MaTau");
					this.OnMaTauChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoaiCho", DbType="Int")]
		public System.Nullable<int> LoaiCho
		{
			get
			{
				return this._LoaiCho;
			}
			set
			{
				if ((this._LoaiCho != value))
				{
					this.OnLoaiChoChanging(value);
					this.SendPropertyChanging();
					this._LoaiCho = value;
					this.SendPropertyChanged("LoaiCho");
					this.OnLoaiChoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenToa", DbType="NVarChar(50)")]
		public string TenToa
		{
			get
			{
				return this._TenToa;
			}
			set
			{
				if ((this._TenToa != value))
				{
					this.OnTenToaChanging(value);
					this.SendPropertyChanging();
					this._TenToa = value;
					this.SendPropertyChanged("TenToa");
					this.OnTenToaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Toa_Ghe", Storage="_Ghes", ThisKey="MaToa", OtherKey="MaToa")]
		public EntitySet<Ghe> Ghes
		{
			get
			{
				return this._Ghes;
			}
			set
			{
				this._Ghes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tau_Toa", Storage="_Tau", ThisKey="MaTau", OtherKey="MaTau", IsForeignKey=true)]
		public Tau Tau
		{
			get
			{
				return this._Tau.Entity;
			}
			set
			{
				Tau previousValue = this._Tau.Entity;
				if (((previousValue != value) 
							|| (this._Tau.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tau.Entity = null;
						previousValue.Toas.Remove(this);
					}
					this._Tau.Entity = value;
					if ((value != null))
					{
						value.Toas.Add(this);
						this._MaTau = value.MaTau;
					}
					else
					{
						this._MaTau = default(Nullable<int>);
					}
					this.SendPropertyChanged("Tau");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Ghes(Ghe entity)
		{
			this.SendPropertyChanging();
			entity.Toa = this;
		}
		
		private void detach_Ghes(Ghe entity)
		{
			this.SendPropertyChanging();
			entity.Toa = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tuyen")]
	public partial class Tuyen : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MaTuyen;
		
		private System.Nullable<int> _GaDi;
		
		private System.Nullable<int> _GaDen;
		
		private System.Nullable<int> _TuyenCha;
		
		private EntitySet<Chuyen> _Chuyens;
		
		private EntitySet<Tuyen> _Tuyens;
		
		private EntityRef<Ga> _Ga;
		
		private EntityRef<Ga> _Ga1;
		
		private EntityRef<Tuyen> _Tuyen1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaTuyenChanging(int value);
    partial void OnMaTuyenChanged();
    partial void OnGaDiChanging(System.Nullable<int> value);
    partial void OnGaDiChanged();
    partial void OnGaDenChanging(System.Nullable<int> value);
    partial void OnGaDenChanged();
    partial void OnTuyenChaChanging(System.Nullable<int> value);
    partial void OnTuyenChaChanged();
    #endregion
		
		public Tuyen()
		{
			this._Chuyens = new EntitySet<Chuyen>(new Action<Chuyen>(this.attach_Chuyens), new Action<Chuyen>(this.detach_Chuyens));
			this._Tuyens = new EntitySet<Tuyen>(new Action<Tuyen>(this.attach_Tuyens), new Action<Tuyen>(this.detach_Tuyens));
			this._Ga = default(EntityRef<Ga>);
			this._Ga1 = default(EntityRef<Ga>);
			this._Tuyen1 = default(EntityRef<Tuyen>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaTuyen", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MaTuyen
		{
			get
			{
				return this._MaTuyen;
			}
			set
			{
				if ((this._MaTuyen != value))
				{
					this.OnMaTuyenChanging(value);
					this.SendPropertyChanging();
					this._MaTuyen = value;
					this.SendPropertyChanged("MaTuyen");
					this.OnMaTuyenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GaDi", DbType="Int")]
		public System.Nullable<int> GaDi
		{
			get
			{
				return this._GaDi;
			}
			set
			{
				if ((this._GaDi != value))
				{
					if (this._Ga.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGaDiChanging(value);
					this.SendPropertyChanging();
					this._GaDi = value;
					this.SendPropertyChanged("GaDi");
					this.OnGaDiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GaDen", DbType="Int")]
		public System.Nullable<int> GaDen
		{
			get
			{
				return this._GaDen;
			}
			set
			{
				if ((this._GaDen != value))
				{
					if (this._Ga1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGaDenChanging(value);
					this.SendPropertyChanging();
					this._GaDen = value;
					this.SendPropertyChanged("GaDen");
					this.OnGaDenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TuyenCha", DbType="Int")]
		public System.Nullable<int> TuyenCha
		{
			get
			{
				return this._TuyenCha;
			}
			set
			{
				if ((this._TuyenCha != value))
				{
					if (this._Tuyen1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTuyenChaChanging(value);
					this.SendPropertyChanging();
					this._TuyenCha = value;
					this.SendPropertyChanged("TuyenCha");
					this.OnTuyenChaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tuyen_Chuyen", Storage="_Chuyens", ThisKey="MaTuyen", OtherKey="MaTuyen")]
		public EntitySet<Chuyen> Chuyens
		{
			get
			{
				return this._Chuyens;
			}
			set
			{
				this._Chuyens.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tuyen_Tuyen", Storage="_Tuyens", ThisKey="MaTuyen", OtherKey="TuyenCha")]
		public EntitySet<Tuyen> Tuyens
		{
			get
			{
				return this._Tuyens;
			}
			set
			{
				this._Tuyens.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ga_Tuyen", Storage="_Ga", ThisKey="GaDi", OtherKey="MaGa", IsForeignKey=true)]
		public Ga Ga
		{
			get
			{
				return this._Ga.Entity;
			}
			set
			{
				Ga previousValue = this._Ga.Entity;
				if (((previousValue != value) 
							|| (this._Ga.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ga.Entity = null;
						previousValue.Tuyens.Remove(this);
					}
					this._Ga.Entity = value;
					if ((value != null))
					{
						value.Tuyens.Add(this);
						this._GaDi = value.MaGa;
					}
					else
					{
						this._GaDi = default(Nullable<int>);
					}
					this.SendPropertyChanged("Ga");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ga_Tuyen1", Storage="_Ga1", ThisKey="GaDen", OtherKey="MaGa", IsForeignKey=true)]
		public Ga Ga1
		{
			get
			{
				return this._Ga1.Entity;
			}
			set
			{
				Ga previousValue = this._Ga1.Entity;
				if (((previousValue != value) 
							|| (this._Ga1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ga1.Entity = null;
						previousValue.Tuyens1.Remove(this);
					}
					this._Ga1.Entity = value;
					if ((value != null))
					{
						value.Tuyens1.Add(this);
						this._GaDen = value.MaGa;
					}
					else
					{
						this._GaDen = default(Nullable<int>);
					}
					this.SendPropertyChanged("Ga1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tuyen_Tuyen", Storage="_Tuyen1", ThisKey="TuyenCha", OtherKey="MaTuyen", IsForeignKey=true)]
		public Tuyen Tuyen1
		{
			get
			{
				return this._Tuyen1.Entity;
			}
			set
			{
				Tuyen previousValue = this._Tuyen1.Entity;
				if (((previousValue != value) 
							|| (this._Tuyen1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tuyen1.Entity = null;
						previousValue.Tuyens.Remove(this);
					}
					this._Tuyen1.Entity = value;
					if ((value != null))
					{
						value.Tuyens.Add(this);
						this._TuyenCha = value.MaTuyen;
					}
					else
					{
						this._TuyenCha = default(Nullable<int>);
					}
					this.SendPropertyChanged("Tuyen1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Chuyens(Chuyen entity)
		{
			this.SendPropertyChanging();
			entity.Tuyen = this;
		}
		
		private void detach_Chuyens(Chuyen entity)
		{
			this.SendPropertyChanging();
			entity.Tuyen = null;
		}
		
		private void attach_Tuyens(Tuyen entity)
		{
			this.SendPropertyChanging();
			entity.Tuyen1 = this;
		}
		
		private void detach_Tuyens(Tuyen entity)
		{
			this.SendPropertyChanging();
			entity.Tuyen1 = null;
		}
	}
}
#pragma warning restore 1591
